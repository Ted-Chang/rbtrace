#!/bin/sh
#
# This script uses the files genrated by rbtrace to create nice graphs
# in the SVG format.
#
# This script needs GNUPLOT
#
#

if [ -z "$1" ]; then
   echo "Usage: rbt_genrate_plots subtitle [xres yres]"
   exit 1
fi

GNUPLOT=$(which gnuplot)
if [ ! -x "$GNUPLOT" ]; then
   echo "You need gnuplot installed to generate graphs"
   exit 1
fi

TITLE="$1"

# set resolution
if [ ! -z "$2" ] && [ ! -z "$3" ]; then
   XRES="$2"
   YRES="$3"
else
   XRES=1280
   YRES=768
fi

if [ -z "$SAMPLE_DURATION" ]; then
   SAMPLE_DURATION="*"
fi

DEFAULT_LINE_WIDTH=2
DEFAULT_LINE_COLORS="
set object 1 rectangle from screen 0,0 to screen 1,1 fillcolor rgb\"#FFFFFF\" behind
set style line 1 lc rgb \"#E41A1C\" lw $DEFAULT_LINE_WIDTH lt 1;
set style line 2 lc rgb \"#377EB8\" lw $DEFAULT_LINE_WIDTH lt 1;
set style line 3 lc rgb \"#4DAF4A\" lw $DEFAULT_LINE_WIDTH lt 1;
set style line 4 lc rgb \"#984EA3\" lw $DEFAULT_LINE_WIDTH lt 1;
set style line 5 lc rgb \"#FF7F00\" lw $DEFAULT_LINE_WIDTH lt 1;
set style line 6 lc rgb \"#DADA33\" lw $DEFAULT_LINE_WIDTH lt 1;
set style line 7 lc rgb \"#A65628\" lw $DEFAULT_LINE_WIDTH lt 1;
set style line 20 lc rgb \"#999999\" lt 0 lw $DEFAULT_LINE_WIDTH;
"

DEFAULT_TERMINAL="set terminal svg enhanced dashed size $XRES,$YRES dynamic"
DEFAULT_TITLE_FONT="\"Helvetica,28\""
DEFAULT_AXIS_FONT="\"Helvetica,14\""
DEFAULT_AXIS_LABEL_FONT="\"Helvetica,16\""
DEFAULT_XLABEL="set xlabel \"Time (sec)\" font $DEFAULT_AXIS_LABEL_FONT"
DEFAULT_XTIC="set xtics font $DEFAULT_AXIS_FONT"
DEFAULT_YTIC="set ytics font $DEFAULT_AXIS_FONT"
DEFAULT_XRANGE="set xrange [0:$SAMPLE_DURATION]"
DEFAULT_YRANGE="set yrange [0:*]"
DEFAULT_GRID="set grid ls 20"
DEFAULT_KEY="set key outside bottom center; set key box horizontal"
DEFAULT_OPTS="$DEFAULT_LINE_COLORS; $DEFAULT_GRID; $DEFAULT_XLABEL; $DEFAULT_XRANGE; $DEFAULT_YRANGE; $DEFAULT_XTIC; $DEFAULT_YTIC; $DEFAULT_MXTIC; $DEFAULT_MYTIC; $DEFAULT_KEY; $DEFAULT_TERMINAL"

#
# plot <sub title> <file name tag> <y axis lable> <y axis scale>
#
plot () 
{
    if [ -z "$TITLE" ]; then
        PLOT_TITLE=" set title \"$1\" font $DEFAULT_TITLE_FONT"
    else
        PLOT_TITLE=" set title \"$TITLE \{ "$1" }\" font $DEFAULT_TITLE_FONT"
    fi
    FILETYPE="$2"
    YAXIS="set ylabel \"$3\" font $DEFAULT_AXIS_LABEL_FONT"
    SCALE=$4

    echo "Title: $PLOT_TITLE"
    echo "File type: $FILETYPE"
    echo "yaxis: $YAXIS"

    i=0

    for x in *_"$FILETYPE".out *_"$FILETYPE".*.out
    do
        if [ -e "$x" ]; then
            i=$((i+1))

            # Get operation type from log file
            # For example, the operation type for xxx-write_bw.out is write
            PT=$(echo $x | sed 's/\(.*\)_'$FILETYPE'\(.*\).out$/\1\2/')
            OP_TYPE=$(echo $PT | cut -d "-" -f 2)

            if [ ! -z "$PLOT_LINE" ]; then
                PLOT_LINE=$PLOT_LINE", "
            fi

            PLOT_LINE=$PLOT_LINE"'$x' using 1 title \"$OP_TYPE\" with lines ls $i"
        fi
    done

    if [ $i -eq 0 ]; then
        echo "No log files found"
        return
    fi

    OUTPUT="set output \"$TITLE-$FILETYPE.svg\" "

    echo "$PLOT_TITLE; $YAXIS; $DEFAULT_OPTS; show style lines; $OUTPUT; plot "$PLOT_LINE | $GNUPLOT -
    unset PLOT_LINE
}

plot "I/O Latency" lat "Time (msec)" 1000
plot "I/O Operations Per Second" iops "IOPS" 1
plot "I/O Bandwidth" bw "Throughput (KB/s)" 1
